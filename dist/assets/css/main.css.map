{"version":3,"mappings":"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","sources":["_variables.scss","global/typography.scss","global/mixins.scss","global/utility-classes.scss","global/helper-classes.scss"],"names":[],"file":"main.css","sourceRoot":"/source/","sourcesContent":["// Colors\n$black: #000;\n$pseudo-black: #333;\n$dark-grey: #444;\n$grey: #888;\n$light-grey: #ccc;\n$white: #fff;\n\n// Transparent Colors\n\n// Color Aliases\n$font-color: $pseudo-black;\n$heading-color: $pseudo-black;\n\n$link-color: $grey;\n$link-hover-color: $dark-grey;\n\n// Fonts\n$open-sans: 'Open Sans', sans-serif;\n$lato: 'Lato', sans-serif;\n\n$body-font-stack: $open-sans;\n$heading-font-stack: $lato;\n\n// Images\n\n// Helper class variables\n$helper-font-color: 'white', 'light-grey'; // The color and colors arrays must match! Color holds the name, colors holds the value.\n$helper-font-colors: $white, $light-grey; // The color and colors arrays must match! Color holds the name, colors holds the value.\n$helper-font-size: 12, 14, 16, 18;\n$helper-font-weight: 300, 400, 600, 700;\n$helper-margin-values: 0, 10, 20, 30, 40, 50;\n$helper-padding-values: 0, 10, 20, 30, 40, 50;\n\n// Our custom column counts\n// Requires \"global/foundation-extensions\" to be loaded in main.scss\n// NOTE: Works best with any number larger than 3, can be a comma separated list.\n$custom-column-counts: 5;\n/**\nCreates classes matching the following formats:\n.small-3-5th // Will cover 3/5\n.small-offset-1-5th // Will offset 1/5\n.small-5-5th // This works too, if you need it\n*/\n","body {\n  color: $font-color;\n  font-family: $body-font-stack;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  color: $heading-color;\n  font-family: $heading-font-stack;\n}\n\np {\n  color: currentColor;\n}\n\na {\n  color: $link-color;\n  @include transition(color 0.3s ease-out);\n  &:hover {\n    color: $link-hover-color;\n    text-decoration: none;\n  }\n}\n","@mixin border-radius( $value ) {\n    -webkit-border-radius: $value;\n    -moz-border-radius: $value;\n    border-radius: $value;\n}\n\n@mixin calc( $property, $expression ) {\n    #{$property}: -webkit-calc(#{$expression});\n    #{$property}: calc(#{$expression});\n}\n\n@mixin columns( $column-count, $column-gap ) {\n    -webkit-column-count: $column-count;\n    -moz-column-count: $column-count;\n    column-count: $column-count;\n    -webkit-column-gap: $column-gap;\n    -moz-column-gap: $column-gap;\n    column-gap: $column-gap;\n}\n\n@mixin rotate( $value ) {\n    -webkit-transform: rotate( $value );\n    -webkit-transform-origin: 50% 50%;\n    -ms-transform: rotate( $value );\n    -ms-transform-origin: 50% 50%;\n    transform: rotate( $value );\n    transform-origin: 50% 50%;\n}\n\n@mixin transform( $value... ) {\n    -webkit-transform: $value;\n    -ms-transform: $value;\n    transform: $value;\n}\n\n@mixin transition( $value... ) {\n    -webkit-transition: $value;\n    transition: $value;\n}\n","// To add a clearfix via a SCSS file, use `@extend .clearfix`\n.clearfix {\n  &:after {\n    content: '';\n    display: table;\n    clear: both;\n  }\n}\n\n.unlimited-row {\n  margin: 0 auto;\n  max-width: 100%;\n  width: 100%;\n  &:before,\n  &:after {\n    content: ' ';\n    display: table;\n  }\n  &:after {\n    clear: both;\n  }\n}\n\n// Swap Foundations ::last-child/end class functionality\n[class*=\"column\"] + [class*=\"column\"]:last-child {\n  float: left;\n}\n\n[class*=\"column\"] + [class*=\"column\"].end {\n  float: right;\n}\n\n// Fixes column-centering after fixing last column float\n.column.small-centered:last-child,\n.columns.small-centered:last-child {\n  clear: both;\n  float: none;\n}\n\n@media only screen and (min-width: 40.063em) {\n  .column.medium-centered:last-child,\n  .columns.medium-centered:last-child {\n    clear: both;\n    float: none;\n  }\n}\n\n@media only screen and (min-width: 64.063em) {\n  .column.large-centered:last-child,\n  .columns.large-centered:last-child {\n    clear: both;\n    float: none;\n  }\n}\n","$positions: top, bottom, left, right;\n\n$i: 1;\n@each $value in $helper-font-color {\n  .font-color-#{$value} { color: nth($helper-font-colors, $i); }\n  $i: $i + 1;\n}\n\n@each $value in $helper-font-size {\n  .font-size-#{$value} { font-size: getRem( $value ); }\n}\n\n@each $value in $helper-font-weight {\n  .font-weight-#{$value} { font-weight: $value; }\n}\n\n@each $value in $helper-margin-values {\n  .margin-#{$value} { margin: getRem( $value ); }\n}\n\n@each $value in $helper-margin-values {\n  @each $position in $positions {\n    .margin-#{$position}-#{$value} { margin-#{$position}: getRem( $value ); }\n  }\n}\n\n@each $value in $helper-padding-values {\n  .padding-#{$value} { padding: getRem( $value ); }\n}\n\n@each $value in $helper-padding-values {\n  @each $position in $positions {\n    .padding-#{$position}-#{$value} { padding-#{$position}: getRem( $value ); }\n  }\n}\n"]}